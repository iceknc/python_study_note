"""
dir 内置函数
    查看对象类的所有属性及方法
    __new__ 创建对象时会被自动调用
    __init__ 对象初始化时会被自动调用，用来定义一个类具有哪些属性的方法
    __del__ 对象从内存中销毁时会被自动调用
    __str__ 返回对象的描述信息，print函数输出使用

class 类名:
    def __init__(self, var...):
        pass

    def func(self, var...):
        pass
类名应该符合大驼峰命名法
方法的self，哪个对象调用了方法，self就是那个对象

私有属性和私有方法
    只希望在对象内部被使用的属性和方法
    定义方法：在名字面前增加两个下划线 __   强行访问方式 引用._类名__属性 引用._类名__方法

对象变量 = 类名()

身份运算符
    is     判断两个标识符是不是引用同一个对象
    is not 判断两个标识符是不是引用不同对象

--------------------------------------------------------------------------------------------
继承
    之类拥有父类的所有方法和属性
    class 类名(父类名):
        pass

    覆写父类方法
        子类中定义一个跟父类同名的方法即可
        super().父类方法   扩展父类方法的用法

    子类对象不直接访问父类的私有属性或者私有方法
    之类对象可以通过父类的共有方法间接访问到私有属性或者私有方法

多继承
    子类可以拥有多个父类
    class 类名(父类1, 父类2 ...):
        pass
    如果不同的父类中存在同名的方法，子类对象调用 遵循MRO method resolution order
        类名.__mro__


新式类 与 旧式(经典)类
    新式：以object作为基类，推荐使用  Python3.x 默认类型
    旧式：不以object作为基类的类，不推荐使用  Python2.x 没有指定父类，则不以object作为基类
    为了保证编写的代码能够兼容Python2.0,定义类时,如果没有父类,建议统一加上object
----------------------------------------------------------------------------------------
多态
    多态可以增加代码的灵活度
    以继承和重写父类方法为前提
    是调用方法的技巧，不会影响到类的内部设计
------------------------------------------------------------------------------------------
类属性
    类属性是给类对象中定义的属性
    通常用来记录与这个类相关的特性
    类属性不会用于记录具体对象的属性
    访问方式： 类名.类属性(推荐)  类实例.类属性(不推荐)
    如果使用 类实例.类属性 = 值，只会给对象添加一个属性，而不会影响到类属性
类方法
    针对类对象定义的方法，在类方法内部可以直接访问类属性或者调用其他的类方法
    定义： @classmethod
          def 类方法名(cls):
            pass
静态方法
    既不需要范围实例属性或者调用实例方法
    也不需要访问类属性或者调用类方法
    这个方法就可以封装成静态方法
    定义： @staticmethod
          def 方法名():
            pass
"""


class Animal:
    def sleep(self):
        print("sleep")


class Cat(Animal):
    def __init__(self, name):
        print("初始化Cat %s" % name)
        self.__name = name

    def __eat(self):
        print("Cat eat %s" % self.__name)

    def sleep(self):
        super().sleep()
        print("Cat sleep")

    @classmethod
    def fuck(cls):
        pass

    @staticmethod
    def run():
        pass


cat = Cat("Tom")
print(cat._Cat__name)
cat._Cat__eat()
cat.sleep()

